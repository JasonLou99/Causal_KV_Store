// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        v3.20.0
// source: causal.proto

package causalproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppendEntriesInCausalArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log         []byte           `protobuf:"bytes,1,opt,name=Log,proto3" json:"Log,omitempty"`
	VectorClock map[string]int32 `protobuf:"bytes,2,rep,name=VectorClock,proto3" json:"VectorClock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AppendEntriesInCausalArgs) Reset() {
	*x = AppendEntriesInCausalArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_causal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendEntriesInCausalArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesInCausalArgs) ProtoMessage() {}

func (x *AppendEntriesInCausalArgs) ProtoReflect() protoreflect.Message {
	mi := &file_causal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesInCausalArgs.ProtoReflect.Descriptor instead.
func (*AppendEntriesInCausalArgs) Descriptor() ([]byte, []int) {
	return file_causal_proto_rawDescGZIP(), []int{0}
}

func (x *AppendEntriesInCausalArgs) GetLog() []byte {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *AppendEntriesInCausalArgs) GetVectorClock() map[string]int32 {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type AppendEntriesInCausalReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *AppendEntriesInCausalReply) Reset() {
	*x = AppendEntriesInCausalReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_causal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendEntriesInCausalReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesInCausalReply) ProtoMessage() {}

func (x *AppendEntriesInCausalReply) ProtoReflect() protoreflect.Message {
	mi := &file_causal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesInCausalReply.ProtoReflect.Descriptor instead.
func (*AppendEntriesInCausalReply) Descriptor() ([]byte, []int) {
	return file_causal_proto_rawDescGZIP(), []int{1}
}

func (x *AppendEntriesInCausalReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_causal_proto protoreflect.FileDescriptor

var file_causal_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc,
	0x01, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x4c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x4d,
	0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x3e, 0x0a,
	0x10, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a,
	0x1a, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e,
	0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x5c, 0x0a, 0x06, 0x43, 0x41, 0x55, 0x53, 0x41, 0x4c, 0x12,
	0x52, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x12, 0x1a, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x1b, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x63, 0x61, 0x75, 0x73, 0x61, 0x6c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_causal_proto_rawDescOnce sync.Once
	file_causal_proto_rawDescData = file_causal_proto_rawDesc
)

func file_causal_proto_rawDescGZIP() []byte {
	file_causal_proto_rawDescOnce.Do(func() {
		file_causal_proto_rawDescData = protoimpl.X.CompressGZIP(file_causal_proto_rawDescData)
	})
	return file_causal_proto_rawDescData
}

var file_causal_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_causal_proto_goTypes = []interface{}{
	(*AppendEntriesInCausalArgs)(nil),  // 0: AppendEntriesInCausalArgs
	(*AppendEntriesInCausalReply)(nil), // 1: AppendEntriesInCausalReply
	nil,                                // 2: AppendEntriesInCausalArgs.VectorClockEntry
}
var file_causal_proto_depIdxs = []int32{
	2, // 0: AppendEntriesInCausalArgs.VectorClock:type_name -> AppendEntriesInCausalArgs.VectorClockEntry
	0, // 1: CAUSAL.AppendEntriesInCausal:input_type -> AppendEntriesInCausalArgs
	1, // 2: CAUSAL.AppendEntriesInCausal:output_type -> AppendEntriesInCausalReply
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_causal_proto_init() }
func file_causal_proto_init() {
	if File_causal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_causal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendEntriesInCausalArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_causal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendEntriesInCausalReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_causal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_causal_proto_goTypes,
		DependencyIndexes: file_causal_proto_depIdxs,
		MessageInfos:      file_causal_proto_msgTypes,
	}.Build()
	File_causal_proto = out.File
	file_causal_proto_rawDesc = nil
	file_causal_proto_goTypes = nil
	file_causal_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CAUSALClient is the client API for CAUSAL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CAUSALClient interface {
	AppendEntriesInCausal(ctx context.Context, in *AppendEntriesInCausalArgs, opts ...grpc.CallOption) (*AppendEntriesInCausalReply, error)
}

type cAUSALClient struct {
	cc grpc.ClientConnInterface
}

func NewCAUSALClient(cc grpc.ClientConnInterface) CAUSALClient {
	return &cAUSALClient{cc}
}

func (c *cAUSALClient) AppendEntriesInCausal(ctx context.Context, in *AppendEntriesInCausalArgs, opts ...grpc.CallOption) (*AppendEntriesInCausalReply, error) {
	out := new(AppendEntriesInCausalReply)
	err := c.cc.Invoke(ctx, "/CAUSAL/AppendEntriesInCausal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CAUSALServer is the server API for CAUSAL service.
type CAUSALServer interface {
	AppendEntriesInCausal(context.Context, *AppendEntriesInCausalArgs) (*AppendEntriesInCausalReply, error)
}

// UnimplementedCAUSALServer can be embedded to have forward compatible implementations.
type UnimplementedCAUSALServer struct {
}

func (*UnimplementedCAUSALServer) AppendEntriesInCausal(context.Context, *AppendEntriesInCausalArgs) (*AppendEntriesInCausalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntriesInCausal not implemented")
}

func RegisterCAUSALServer(s *grpc.Server, srv CAUSALServer) {
	s.RegisterService(&_CAUSAL_serviceDesc, srv)
}

func _CAUSAL_AppendEntriesInCausal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesInCausalArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAUSALServer).AppendEntriesInCausal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CAUSAL/AppendEntriesInCausal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAUSALServer).AppendEntriesInCausal(ctx, req.(*AppendEntriesInCausalArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _CAUSAL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CAUSAL",
	HandlerType: (*CAUSALServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntriesInCausal",
			Handler:    _CAUSAL_AppendEntriesInCausal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "causal.proto",
}
